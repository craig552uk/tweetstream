#!/usr/bin/env ruby
require 'tweetstream'
require 'optparse'
require 'yaml'

# Default options
options = {}
options[:config_file]   = ENV['HOME']+'/.tweetstream.yaml'
options[:oauth]         = {}
options[:keywords]      = []
options[:screen_names]  = []
options[:user_ids]      = []
options[:spam_phrases]  = []
options[:save_location] = {}

# Get options from command line
opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: tweetstream -c CONFIG_FILE [-k KEYWORDS] [-u USERNAMES]"
  opt.separator ""
  opt.separator "Options:"
  opt.on('-c FILE',  '--config-file FILE',   String, 'Config File')      { |v| options[:config_file] = v }
  opt.on('-h',       '--help',                       'Show Help')        { puts opt_parser; exit }
  opt.on('-k A,B,C', '--keywords A,B,C',     Array,  'Keywords to track'){ |v| options[:keywords]    = v }
  opt.on('-s A,B,C', '--screen-names A,B,C', Array,  'Users to follow')  { |v| options[:screen_names]   = v }
end
opt_parser.parse!

# Get options from config file
begin
  config = YAML.load_file(options[:config_file])
rescue Errno::ENOENT
  exit
end

# Merge config with options
options[:oauth]         = config[:oauth]                                      unless config[:oauth].nil?
options[:spam_phrases]  = config[:spam_phrases]                               unless config[:spam_phrases].nil?
options[:save_location] = config[:save_location]                              unless config[:save_location].nil?
options[:keywords]      = options[:keywords].concat     config[:keywords]     unless config[:keywords].nil?
options[:screen_names]  = options[:screen_names].concat config[:screen_names] unless config[:screen_names].nil?

# Get user ids from screen names
@rest_client       = Twitter::Client.new options[:oauth]
options[:user_ids] = @rest_client.users(*options[:screen_names]).map{ |user| user.id.to_s }

# Build filter query
query = {}
query[:track]  = options[:keywords]
query[:follow] = options[:user_ids]

# Notify
keywords     = options[:keywords].map{ |k| "'#{k}'"}.join(' ')
screen_names = options[:screen_names].map{ |k| "'#{k}'"}.join(' ')
puts "Tracking keywords #{keywords}"
puts "Following users   #{screen_names}"
puts "Hit cmd+c to exit\n"

begin
  # Filter tweets from the live stream
  @stream_client = TweetStream::Client.new options[:oauth]
  @stream_client.on_error do |error|
    puts error.inspect
  end
  @stream_client.filter(query) do |status|

    # Filter spam
    unless options[:spam_phrases].any?{ |phrase| status.text.include? phrase}

      @timestamp = Time.now.strftime('%F %T')

      unless config[:save_location][:tweets].nil?
        # Save Tweet
        t  = []
        t << status.id
        t << status.user.screen_name
        t << status.user.name
        t << status.user.id
        t << status.user.profile_image_url
        t << status.text
        t << status.created_at
        t << status.source.scan(/>(.*)</).flatten.first || "web"

        t.map!{ |e| e.to_s.gsub(/[\r\t\n\|]/,'') }

        filename = config[:save_location][:tweets]
        filename = filename.gsub(/\{DATE\}/, status.created_at.strftime('%F'))
        File.open(filename, 'a') {|f| f.write t.join("|") + "\n" }
        puts "[#{@timestamp}] Saved Tweet <#{status.id}> by #{status.user.screen_name}"
      end

      unless config[:save_location][:users].nil?
        # Save User
        u = []
        u << status.user.id
        u << status.user.screen_name
        u << status.user.name
        u << status.user.location
        u << status.user.url
        u << status.user.description || ''
        u << status.user.profile_image_url
        u << status.user.created_at
        u << status.user.followers_count
        u << status.user.listed_count
        u << status.user.favourites_count
        u << status.user.statuses_count
        u << status.user.time_zone
        u << status.user.lang

        u.map!{ |e| e.to_s.gsub(/[\r\t\n\|]/,'') }

        filename = config[:save_location][:users]
        filename = filename.gsub(/\{DATE\}/, status.created_at.strftime('%F'))
        File.open(filename, 'a') {|f| f.write u.join("|") + "\n" }
        puts "[#{@timestamp}] Saved User <#{status.user.id}> #{status.user.screen_name}"
      end

    end

  end
rescue Interrupt
  # Exit cleanly with cmd+c
end